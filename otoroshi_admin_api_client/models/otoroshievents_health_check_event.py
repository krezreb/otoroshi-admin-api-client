from typing import Any, Dict, List, Type, TypeVar, Union, cast

import attr

from ..models.null import Null
from ..types import UNSET, Unset

T = TypeVar("T", bound="OtoroshieventsHealthCheckEvent")


@attr.s(auto_attribs=True)
class OtoroshieventsHealthCheckEvent:
    """Events generated by health checks"""

    error: Union[Null, Unset, str] = UNSET
    health: Union[Null, Unset, str] = UNSET
    logic_check: Union[Unset, bool] = UNSET
    status: Union[Unset, int] = UNSET
    url: Union[Unset, str] = UNSET
    duration: Union[Unset, int] = UNSET
    additional_properties: Dict[str, Any] = attr.ib(init=False, factory=dict)

    def to_dict(self) -> Dict[str, Any]:
        error: Union[Dict[str, Any], Unset, str]
        if isinstance(self.error, Unset):
            error = UNSET
        elif isinstance(self.error, Null):
            error = UNSET
            if not isinstance(self.error, Unset):
                error = self.error.to_dict()

        else:
            error = self.error

        health: Union[Dict[str, Any], Unset, str]
        if isinstance(self.health, Unset):
            health = UNSET
        elif isinstance(self.health, Null):
            health = UNSET
            if not isinstance(self.health, Unset):
                health = self.health.to_dict()

        else:
            health = self.health

        logic_check = self.logic_check
        status = self.status
        url = self.url
        duration = self.duration

        field_dict: Dict[str, Any] = {}
        field_dict.update(self.additional_properties)
        field_dict.update({})
        if error is not UNSET:
            field_dict["error"] = error
        if health is not UNSET:
            field_dict["health"] = health
        if logic_check is not UNSET:
            field_dict["logicCheck"] = logic_check
        if status is not UNSET:
            field_dict["status"] = status
        if url is not UNSET:
            field_dict["url"] = url
        if duration is not UNSET:
            field_dict["duration"] = duration

        return field_dict

    @classmethod
    def from_dict(cls: Type[T], src_dict: Dict[str, Any]) -> T:
        d = src_dict.copy()

        def _parse_error(data: object) -> Union[Null, Unset, str]:
            if isinstance(data, Unset):
                return data
            try:
                if not isinstance(data, dict):
                    raise TypeError()
                _error_type_0 = data
                error_type_0: Union[Unset, Null]
                if isinstance(_error_type_0, Unset):
                    error_type_0 = UNSET
                else:
                    error_type_0 = Null.from_dict(_error_type_0)

                return error_type_0
            except:  # noqa: E722
                pass
            return cast(Union[Null, Unset, str], data)

        error = _parse_error(d.pop("error", UNSET))

        def _parse_health(data: object) -> Union[Null, Unset, str]:
            if isinstance(data, Unset):
                return data
            try:
                if not isinstance(data, dict):
                    raise TypeError()
                _health_type_0 = data
                health_type_0: Union[Unset, Null]
                if isinstance(_health_type_0, Unset):
                    health_type_0 = UNSET
                else:
                    health_type_0 = Null.from_dict(_health_type_0)

                return health_type_0
            except:  # noqa: E722
                pass
            return cast(Union[Null, Unset, str], data)

        health = _parse_health(d.pop("health", UNSET))

        logic_check = d.pop("logicCheck", UNSET)

        status = d.pop("status", UNSET)

        url = d.pop("url", UNSET)

        duration = d.pop("duration", UNSET)

        otoroshievents_health_check_event = cls(
            error=error,
            health=health,
            logic_check=logic_check,
            status=status,
            url=url,
            duration=duration,
        )

        otoroshievents_health_check_event.additional_properties = d
        return otoroshievents_health_check_event

    @property
    def additional_keys(self) -> List[str]:
        return list(self.additional_properties.keys())

    def __getitem__(self, key: str) -> Any:
        return self.additional_properties[key]

    def __setitem__(self, key: str, value: Any) -> None:
        self.additional_properties[key] = value

    def __delitem__(self, key: str) -> None:
        del self.additional_properties[key]

    def __contains__(self, key: str) -> bool:
        return key in self.additional_properties
